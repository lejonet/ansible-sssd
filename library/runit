#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2016, Daniel Kuehn <daniel@kuehn.se>
# 
# Based on runit module by
# (c) 2014, Brian Akins <brian@akins.org>
#
# Based on monit module by
# (c) 2013, Darryl Stoflet <stoflet@gmail.com>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#

DOCUMENTATION = '''
---
module: runit
short_description: Manage the state of a program controlled by runit
description:
     - Manage the state of a program controlled by I(runit)
options:
  name:
    description:
      - The name of the I(runit) program/process to manage
    required: true
    default: null
  state:
    description:
      - The state of service
    required: false
    default: null
    choices: [ "started", "stopped", "restarted" ]
  timeout:
    description:
      - The timeout to wait for the service to start or stop before considering an error
    required: false
    default: 7
  enabled:
    description:
      - Enable the service to be started at bootup
    required: false
    default: null
  service_dir:
    description:
      - The directory to put/remove the symlink in when dis/enabling a service
    required: false
    default: /etc/runit/runsvdir/current
  source_dir:
    description:
      - The directory to point the symlink to when enabling a service
    required: false
    default: /etc/runit/runsvdir/all
  force:
    description:
      - Forces the creation of the symlink, even if the target file/link exists
    required: false
    default: null
  logging:
    description:
      - Creates directory for storing logs of the service
    required: false
    default: true
  log_dir:
    description:
      - The base path that the log directory will be created, the log directory will be named after the service
    required: false
    default: /var/log/services/
requirements: [ ]
version_added: 1.6
author: Daniel Kuehn
'''

EXAMPLES = '''
# Manage the state of program "httpd" to be in "started" state.
- runit: name=httpd state=started

# Enable the "sshd" service to be "started" when runit enters stage 2
- runit: name=sshd enabled=true
'''

def main():
    arg_spec = dict(
        name        = dict(required=True),
        state       = dict(required=False, choices=['started', 'restarted', 'stopped']),
        force       = dict(required=False),
        enabled     = dict(required=False, type='bool'),
        timeout     = dict(required=False, default='7'),
        service_dir = dict(required=False, default='/etc/runit/runsvdir/current'),
        source_dir  = dict(required=False, default='/etc/runit/runsvdir/all'),
        logging     = dict(required=False, type='bool', default=True),
        log_dir     = dict(required=False, default='/var/log/services'),
    )

    module = AnsibleModule(argument_spec=arg_spec, supports_check_mode=True)

    name    = module.params['name']
    state   = module.params['state']
    timeout = module.params['timeout']
    enabled = module.params['enabled']
    force   = module.params['force']

    logging = module.params['logging']
    log_dir = module.params['log_dir']

    if state and enabled:
        module.fail_json(msg='state and enabled cannot be used at the same time', state=state, enabled=enabled)

    service_dir = module.params['service_dir']
    source_dir  = module.params['source_dir']

    SV = module.get_bin_path('sv', True)

    def status():
        """Return the status of the process in runit, or 'fail' if not present."""
        rc, out, err = module.run_command('%s status %s' % (SV, name), check_rc=True)
        for line in out.split('\n'):
            # Sample output lines:
            # run: name: (pid 12345) 100s; run: log: (pid 54321) 99s
            parts = line.lower().split()
            return parts[0][:-1]
        else:
            return ''

    def run_command(command):
        """Runs a runit command, and returns the new status."""
        module.run_command('%s -w %s %s %s' % (SV, timeout, command, name), check_rc=True)
        return status()

    if state:
        if status() == 'fail':
            module.fail_json(msg='%s process not presently configured with runit' % name, name=name, state=state)

        running = 'run' == status()

        if running and state == 'started':
            module.exit_json(changed=False, name=name, state=state)

        if running and state == 'stopped':
            if module.check_mode:
                module.exit_json(changed=True)
            status = run_command('stop')
            if status == 'down':
                module.exit_json(changed=True, name=name, state=state)
            module.fail_json(msg='%s process not stopped' % name, status=status)

        elif state == 'restarted':
            if module.check_mode:
                module.exit_json(changed=True)
            status = run_command('restart')
            if status == 'run':
                module.exit_json(changed=True, name=name, state=state)
            module.fail_json(msg='%s process not restarted' % name, status=status)

        elif not running and state == 'started':
            if module.check_mode:
                module.exit_json(changed=True)
            status = run_command('start')
            if status == 'run':
                module.exit_json(changed=True, name=name, state=state)
            module.fail_json(msg='%s process not started' % name, status=status)

    changed = False
    import os.path

    if enabled == True:
        LN = module.get_bin_path('ln', True)
        if force:
            module.run_command('%s -sf %s/%s %s/%s' % (LN, source_dir, name, service_dir, name), check_rc=True)
            changed = True

        if not os.path.exists('%s/%s' % (service_dir, name)):
            module.run_command('%s -s %s/%s %s/%s' % (LN, source_dir, name, service_dir, name), check_rc=True)
            changed = True

        if not os.path.exists('%s/%s' % (log_dir, name)):
            MKDIR = module.get_bin_path('mkdir', True)
            module.run_command('%s %s/%s' % (MKDIR, log_dir, name))
            changed = True

        module.exit_json(changed=changed, name=name, enabled=enabled)
    elif enabled == False:
        RM = module.get_bin_path('rm', True)

        if os.path.exists('%s/%s' % (service_dir, name)):
            module.run_command('%s %s/%s' % (RM, service_dir, name), check_rc=True)
            changed = True

        if os.path.exists('%s/%s' % (log_dir, name)):
            module.run_command('%s %s/%s' % (RM, log_dir, name), check_rc=True)
            changed = True

        module.exit_json(changed=changed, name=name, enabled=enabled)

    module.exit_json(changed=False, name=name, state=state, enabled=enabled)

# import module snippets
from ansible.module_utils.basic import *

main()
